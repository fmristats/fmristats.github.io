Getting to know fmristats
-------------------------

fmristats provides a variety of command line tools which allow access to
most of its functionality. In particular when it comes to fitting a
particular signal model to subject data.

Before you start, a small but important warning: more »traditional«
approaches to FMRI data analysis recommend or encourage user to first
spatially smooth data prior to the statistical data analysis and to
apply motion or slice timing corrections. In fmristats, spatial
smoothing is an integral part of the model fitting process itself.
Therefore, when using fmristats, you should **NOT alter your images. DO
NOT DO motion corrections. DO NOT correct for slice timing differences.
DO NOT smooth your data.** Your statistical analysis will benefit, you
will gain power, and you will be rewarded with valid test statistics.

In order to fit a signal model to the FMRI session data of a subject,
you need to first (i) define the *irritation*, *conditioning*, or
*paradigm* of the session, i.e. provide the on- and offsets of the task
blocks as well as their durations, you will need to (ii) separate the
foreground from the background in the 4D FMRI image, and you need to
(iii) estimate (or provide) the locations, positions and tilts of the
subject's head in the scanner during acquisition. Then you (iv) fit a
signal model to your data.

This tutorial will lead you through each of these steps.

Irritation files
................

The subjects in an FMRI study are confronted with various stimuli. The
following will define a two-block task design labelled *FOO* for subject
*42* in a study called *MyStudy* measured on the 1st of November, 2015
at 12:54, and it will save the design to a file named ``subject.irr``.
The control block has been labelled *shapes*, the stimulus block has
been labelled *faces*.

.. code:: shell

    fmriirritation --irritation subject.irr \
        --cohort MyStudy \
        --id 42 \
        --datetime 2015-11-01-1254 \
        --paradigm FOO \
        --namex shapes \
        --onsetsx 2 84 166 248 330 \
        --durationsx 30 \
        --namey faces \
        --onsetsy 37 119 201 283 \
        --durationsy 44 \
        --verbose

Use ``-v/--verbose`` to increase verbosity of any fmristats command
line tools.

Session files
.............

Data import is handled by the Nibabel_ project, allowing a flexible
import from various formats for FMRI data. This includes, in particular,
the popular Nifti1 format.

.. _Nibabel: http://nipy.org/nibabel/

Say, FMRI data have been collected and they have been converted from
DICOM to Nifti1 format using the dcm2nii_ tool with (essentially) all
the default settings:

- 4D=1: "will generate 4D files (FSL style)",
- SingleNIIFile=1: "will create .nii files (FSL style)",
- Gzip=1: "will create compressed .nii.gz files (FSL style)",
- SPM2=0: "headers will be in NIfTI (SPM5/FSL)."

.. _dcm2nii: http://people.cas.sc.edu/rorden/mricron/dcm2nii.html

And say, the data have been saved to ``subject.nii.gz``.

Then the FMRI data can be converted to a fmristats session file by
providing ``nii2ses`` with ``subject.nii.gz`` and ``subject.irr``:

.. code:: shell

    nii2session --session subject.ses \
        --nii subject.nii.gz \
        --irritation subject.irr \
        --epi-code 3 \
        --detect-foreground -v

The above call also runs a foreground detection algorithm. The session
file  will be saved to ``subject.ses``.

The argument ``--epi-code 3`` codes the direction in which the EPI have
been measured during the session. The directions are coded as follows:

======== =====================
EPI code  direction
======== =====================
-3       superior to inferior
-2       anterior to posterior
-1       right to left
 1       left to right
 2       posterior to anterior
 3       inferior to superior
======== =====================

You may also provide more meta data to the call. If you do so,
``nii2ses`` will check if they match the meta data in the provided
irritation file ``subject.irr``.

Alternative call:

.. code:: shell

    nii2session --session subject.ses \
        --cohort MyStudy \
        --id 42 \
        --datetime 2015-11-01-1254 \
        --paradigm FOO \
        --nii subject.nii.gz \
        --irritation subject.irr \
        --epi-code 3 \
        --detect-foreground -v

By default, *valid* files will not be overwritten: if something does not
match, though, fmristats will delete the file and try to fix things.
Use ``-f/--force`` to force the recreation of any files (valid or not).

You may query information about any file that is created by
fmristats by calling ``fmriinfo`` on the same.

.. code:: shell

    fmriinfo subject.ses

Output:

.. code:: shell

    subject.ses: session file

        Cohort:   MyStudy
        Subject:  42
        Date:     2015-11-01-1254
        Paradigm: FOO

        EPI code: 3

        Type of irritation: block design
        Block number: 2
        Block names:  ['shapes', 'faces']
        Onsets: {'shapes': array(30.0), 'faces': array(44.0)}
        Durations: {'shapes': array([   2.,   84.,  166.,  248.,  330.]),
                    'faces' : array([  37.,  119.,  201.,  283.])}
        Number of onsets per block: {'shapes': 5, 'faces': 4}

        Resolution (left to right):         3.28
        Resolution (posterior to anterior): 3.28
        Resolution (inferior to superior):  4.18
        Diagonal:      6.25
        Volume:        45.00
        Aspect 0 on 1: 1.00
        Aspect 0 on 2: 0.78
        Aspect 1 on 2: 0.78
        Rigid transformation: False

You may also provide more than one file to the call:

.. code:: shell

    fmriinfo subject.irr subject.ses

Reference maps
..............

Fit head movements by, e.g, a PCA model, and save the fitted reference
maps to ``subject.ref``:

.. code:: shell

    fmririgid --ses subject.ses --ref subject.ref -v

Here, you have seen another feature of fmristats: you may shorten
any argument as long it is still uniquely identifiable. The above call is
indeed identical to:

.. code:: shell

    fmririgid -v \
        --session        subject.ses \
        --reference-maps subject.ref

Create some informative plots which evaluate the ability of the PCM
method to track the head of your subject:

.. code:: shell

    ref2plot --ref subject.ref -v

This will save various figures to: `figures/FOO/assessments`. But you
may change this default location. If you look at the figures, you will
notice that an outlier detection has been applied to the estimated head
movements. Scan cycles which are marked as outlying will not be used in
the fitting.

.. code:: shell

    fmriinfo subject.ref

Population maps
...............

If you aim for inference, you need to relate all the brains :math:`R_j`
of subjects :math:`j` in your study with one another, i.e. you need to
chose a reference brain :math:`M` and define diffeomorphisms :math:`ψ_j`
which map :math:`M` to each respective :math:`R_j`.

.. math::

    ψ_j: M \to R_j.

But if you are only interested in subject :math:`j`, you may simply set
:math:`M` identical to :math:`R_j` and :math:`ψ_j` equal to the
identity.

fmristats offers two possibilities for defining a *native* standard or
population space for a subject. The *identity population map in native
resolution* is created via:

.. code:: shell

    fmripop --ses subject.ses --population-map subject.pop -v \
        --vb-type scanner

This will set the coordinate system of the standard space equal to the
scanner and the image grid equal to the native resolution of the
acquisition sequence, and saves the map to `subject.pop`.

*Alternatively 1 (recommended)*:

.. code:: shell

    fmripop --ses subject.ses --population-map subject.pop -v \
        --vb-type reference --resolution 2.0

will set the coordinate system of the standard space equal to the
scanner and the image grid to a resolution of: :math:`2x2x2 mm^3`. This
is in fact the default setting of `fmripop`, thus the above call is
equivalent to:

.. code:: shell

    fmripop --ses subject.ses --population-map subject.pop -v

*Alternatively 2 (also recommended)*:

.. code:: shell

    fmripop --ses subject.ses --ref subject.ref \
        --population-map subject.pop -v \
        --vb-type scan --cycle 42 --resolution 2.0

will set the coordinate system of the standard space equal to the
position of the subject during the 42nd scan cycle and the image grid to
a resolution of: :math:`2x2x2 mm^3`.

We shall often refer to :math:`R_j` as the subject or *reference space*
of the subject, and to :math:`M` as the standard or *population space*.

How to fit the signal model
...........................

The command line tool ``fmrifit`` will fit a signal model to FMRI data.
You will need to provide ``fmrifit`` with an FMRI session file (the
data), a population map (a mapping from standard space to the subject),
and reference maps (the head movements), say ``subject.ses``,
``subject.pop``, and ``subject.ref``.

.. code:: shell

    fmrifit --fit subject.fit \
        --session subject.ses \
        --reference-maps subject.ref \
        --population-map subject.pop \
        --stimulus-block faces --control-block shapes -v

The above call saves the fit to ``subject.fit``.

Prune non-brain areas
.....................

The WLS optimisation in the fitting procedure uses a weighting scheme
with non-null spatial extent. Thus, evaluating (i.e. fitting) an FMRI
model close but outside of the actual brain of a subject will
nevertheless result in "valid" parameter estimates. In the case that
``fmrifit`` is not supplied with a brain mask, these "outside fits" can
be detected post-hoc as they are naturally accompanied by a drastic drop
in available sample size.

By default, ``fmrifit`` will estimate a default *data mask* on :math:`M`
from the foreground/background difference saved in ``subject.ses``. If
this mask still contains non-brain areas, you may want to further prune
the parameter fields from these areas.

Prune by thresholds
:::::::::::::::::::

The command line programs ``fmriprune`` or ``fsl4prune`` can be used to
generate brain masks. Both commands will force a minimum number of
observations to be available around each grid point in :math:`V_M` by
either setting a user defined hard lower bound for the minimum:

.. code:: shell

    fmriprune --fit subject.fit -vv -t 1800

Or by setting the lower bound to a given fraction of the maximum
available MR measures at a point:

.. code:: shell

    fmriprune --fit subject.fit -vv -p .5 -f

The generated brain mask is directly saved into the file
``subject.fit``.

Prune by using a wrapper to BET
:::::::::::::::::::::::::::::::

The difference between ``fmriprune`` and ``fsl4prune`` is that the
latter also contains a wrapper to BET_. The following

.. code:: shell

    fsl4prune --fit subject.fit -p .5 --variant R -v -f

is equivalent to:

.. code:: shell

    fmriprune --fit subject.fit -p .5

    fit2nii --fit subject.fit --nii intercept.nii.gz \
        --parameter intercept --value point \
        --round-to-integer

    bet intercept.nii.gz mask.nii.gz -R

    nii2image mask.nii.gz mask.image

Followed by the python script:

.. code:: python

    from fmristats import *

    result = load('subject.fit')
    mask = load('mask.image')

    result.population_map.set_template_mask(mask)
    result.save('subject.fit')

.. _BET: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/BET

Standard spaces
...............

If you aim for population inference, you need to relate the brains of
all subjects in your study to a common brain :math:`M`. If :math:`R_j`
is the brain of subject :math:`j`, you need to chose a representative,
say a template brain :math:`M` in MNI standard space, and fit
diffeomorphisms :math:`ψ_j` which map :math:`M` to each :math:`R_j`.

.. math::

    ψ_j: M \to R_j.

Before you can fit these diffeomorphisms :math:`ψ_j`, though, you will
need to define this template brain :math:`M` in standard space.
In case you have FSL installed on your system, you may find many
templates in

.. code:: shell

    /usr/share/data/fsl-mni152-templates/

The tool `nii2image` can be used to convert various imaging formats to
fmristats' own file format.

.. code:: shell

    nii2image --name template \
        /usr/share/data/fsl-mni152-templates/MNI152_T1_2mm_brain.nii.gz \
        vb-template.image

    nii2image --name background \
        /usr/share/data/fsl-mni152-templates/MNI152_T1_2mm.nii.gz \
        vb-background.image

ANTS
::::

Next, a representative :math:`R_j` for the subject brain needs to be
selected.

*Posibility 1:* A candidate for :math:`R_j` is the intercept of a fit of
the signal model with respect to the reference space of the subject,
namely the just created ``subject.fit`` from above.

.. code:: shell

    ants4pop --population-map subject-MNI.pop \
        --vb MNI.image -v \
        --fit subject.fit

This is a wrapper to ANTS.

*Posibility 2:* The above has the disadvantage that you will need to
first fit the signal model to the FMRI data in the reference space and
that this fit may take quite some time.

Alternatively, you can define the reference space of the subject to be
equal to the position of the subject's head during a specific scan
cycle, say

.. code:: shell

    fmririgid -v \
        --session        subject.ses \
        --reference-maps subject.ref \
        --cycle 42

And then use the 3D image of the subject during this scan cycles as
reference.

.. code:: shell

    ants4pop --population-map subject-MNI.pop \
        --vb MNI.image -v \
        --session subject.ses --cycle 42

You can query information about the created files:

.. code:: shell

   fmriinfo subject-MNI.pop

Then fit the signal model in standard space at all points at which the
template has valid entries, i.e. grey scale intensities :math:`>0`. .

.. code:: shell

    fmrifit --fit subject-MNI.fit \
        --session subject.ses \
        --reference-maps subject.ref \
        --population-map subject-MNI.pop \
        --stimulus-block faces --control-block shapes -v

This will save the fit to ``subject-MNI.fit``.

FNIRT
:::::

If you are using the software FNIRT_ to fit the respective :math:`ψ_j`,
then you may use the command line tool ``fsl4pop`` (which is distributed
together with fmristats) to parse the `warp coefficient file`_ which is
created by FNIRT_.

As before, a candidate for :math:`R_j` is the intercept of a fit of the
signal model with respect to the reference space of the subject, namely
the just created ``subject.fit`` from above. The field can then be
exported to Nifti1 using ``fit2nii`` and then fed to the tool of your
choice.

.. code:: shell

    fit2nii --fit subject.fit --nii intercept.nii.gz \
        --parameter intercept --value point \
        --round-to-integer

This will extract the intercept from a fit, round the field to the
closest integer, and save the result to `intercept.nii.gz`.

.. code:: shell

    # then, you may have done something along the line…

    fsl5.0-fnirt --in=intercept.nii.gz --config=T1_2_MNI152_2mm \
        --cout=intercept_warpcoef.nii.gz

    # provide the argument in: --in   as --nb-nii
    # and:                     --cout as --warpcoef

    fsl4pop --population-map subject-MNI.pop --image MNI.image -v \
        --nb-fit subject.fit \
        --nb-nii intercept.nii.gz \
        --warpcoef intercept_warpcoef.nii.gz

This will save :math:`ψ_j` to ``subject-MNI.pop`` and :math:`M` to
``MNI.image``.

By default (but you may change the defaults), ``fsl4pop`` will assume
that the template ``MNI152_T1_2mm`` has been used to define the domain
of each :math:`ψ_j`, and that FNIRT has been provided with a reference
mask that is a dichotomised version of ``MNI152_T1_2mm_brain``, and both
these files reside in

.. code:: shell

    /usr/share/data/fsl-mni152-templates/MNI152_T1_2mm.nii.gz
    /usr/share/data/fsl-mni152-templates/MNI152_T1_2mm_brain.nii.gz

which is the default location of these files when you installed FSL.

You can query information about the created files:

.. code:: shell

   fmriinfo subject-MNI.pop

Then fit the signal model in standard space at all points at which the
template has valid entries, i.e. grey scale intensities :math:`>0`. .

.. code:: shell

    fmrifit --fit subject-MNI.fit \
        --session subject.ses \
        --reference-maps subject.ref \
        --population-map subject-MNI.pop \
        --stimulus-block faces --control-block shapes -v

This will save the fit to ``subject-MNI.fit``.

.. _FNIRT: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/FNIRT

.. _`warp coefficient file`: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/FNIRT/UserGuide#A--cout

Example
.......

This is a complete summary of everything that was mentioned above. The
code will parse the Nifti1-file of a subject, fit the foreground in the
FMRI, it will fit the subject movements by a PCM-method and it will fit
the population map using ANTS. Then it will fit the default model to the
FMRI data by the MB-estimator and prune the result from non-brain areas
using BET:

.. code:: shell

    # this will create the file subject-0099.irr:
    fmriirritation --irritation subject-0099.irr \
        --cohort FOR2107 \
        --id 42 \
        --datetime 2015-11-01 \
        --paradigm HFM \
        --namex shapes \
        --onsetsx 2 84 166 248 330 \
        --durationsx 30 \
        --namey faces \
        --onsetsy 37 119 201 283 \
        --durationsy 44 \
        --epi 3 \
        --verbose

    # this will create the file subject-0099.ses:
    nii2session --session subject-0099.ses \
        --nii subject-0099.nii.gz \
        --irritation subject-0099.irr \
        --epi-code 3 \
        --detect-foreground -v

    # this will create the file subject-0099.ref:
    fmririgid --reference-maps subject-0099.ref \
        --session subject-0099.ses \
        --cycle 42 -v

    # this will create the file vb-template.image:
    nii2image --name template \
        /usr/share/data/fsl-mni152-templates/MNI152_T1_2mm_brain.nii.gz\
        vb-template.image

    # this will create the file vb-background.image:
    nii2image --name background \
        /usr/share/data/fsl-mni152-templates/MNI152_T1_2mm.nii.gz \
        vb-background.image

    # this will create the file subject-0099-MNI.pop:
    ants4pop --population-map subject-0099-MNI.pop \
        --vb MNI.image -v \
        --session subject-0099.ses --cycle 42

    # this will create the file subject-0099-MNI.fit:
    fmrifit --fit subject-0099-MNI.fit \
        --session subject-0099.ses \
        --reference-maps subject-0099.ref \
        --population-map subject-0099-MNI.pop \
        --stimulus-block faces --control-block shapes -v

    # this will write a mask to the file subject-0099-MNI.fit:
    fsl4prune --fit subject-0099-MNI.fit -p .5 --variant R -v
