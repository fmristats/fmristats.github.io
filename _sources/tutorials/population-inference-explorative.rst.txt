Population inference (explorative)
----------------------------------




Load data, fit model, and extract statistics
............................................

Load data:


.. code:: python

    
    from fmristats import *
    from fmristats.plot import *
    
    population_sample = load(path_to_sample)
    
    print("""
    Number of subjects in the sample:   {:d}
    Subjects that are not right handed: {:d}""".format(
        len(population_sample.covariates),
        (population_sample.covariates.waterloo < 20).sum()))


.. code::

    
    Number of subjects in the sample:   64
    Subjects that are not right handed: 0
    



Fit the population model to the sample of neural activities.


.. code:: python

    
    pop = PopulationModel(population_sample)
    meta = pop.fit()
    
    meta.save('interim-results/explorative.mfit')


.. code::

      … all voxels in the mask are identifiable.
      … some voxel have missing data along the subject dimension.
      … mask has shape: (91, 109, 91)
      … number of pixels to be fitted: 163431
      … a meta analysis will be performed
    



Extract the Knapp-Hartung adjusted t-statistics field that tests for
task related neural activity in the population:


.. code:: python

    tstatistics = meta.get_tstatistic()




Plot:


.. code:: python

    picture(tstatistics)


.. image:: figures/population-inference-explorative_figure5_1.png
   :width: 15 cm



Find the highest peak in the t-statistics field:


.. code:: python

    
    peak = np.nanargmax(tstatistics.data)
    index = np.unravel_index(peak, tstatistics.data.shape)
    
    print(index)


.. code::

    (51, 70, 34)
    



Plot the respective slice:


.. code:: python

    
    picture(tstatistics,3,1,1,[index[-1]],
        interpolation='bilinear', mark_peak=True)
    
    print(tstatistics.data[index])


.. code::

    11.61039937479234
    

.. image:: figures/population-inference-explorative_figure7_1.png
   :width: 15 cm






Find the coordinates of the peak in standard space:


.. code:: python

    
    coordinate = tstatistics.apply_to_index(index)
    print(coordinate)


.. code::

    
    [-12.  14.  -4.]
    



Use the ``atlasquery`` tool from the FSL project to see to which
structure these coordinates belong:

.. code:: shell

    atlasquery -a "MNI Structural Atlas" -c -12,14,-4
    MNI Structural Atlas
    78% Caudate

Extract data at index
.....................

Extract the meta data from the sample and the fit:


.. code:: python

    
    df = population_sample.at_index(index)
    df.valid.all()
    df.sort_values(by='waterloo', inplace=True)
    
    dm = meta.at_index(index)
    dm.set_index('parameter', inplace=True)




Forest and funnel plot
......................

Define the critical values for the plots:


.. code:: python

    
    from scipy.stats.distributions import t
    from scipy.stats.distributions import norm
    
    crt_subject = norm.ppf(q=.95)
    crt_population = t.ppf(q=.95, df = dm.loc['intercept', 'df'])
    
    print('{:4f}, {:4f}'.format(crt_subject, crt_population))


.. code::

    1.644854, 1.669402
    



Forest plot
:::::::::::

Forest Plot in ascending order of handiness (left handed on the bottom,
right handed on the top):


.. code:: python

    
    df['yvec'] = range(len(df.task))
    df['reci'] = 1/ df.stderr**2
    
    x = dm.loc['intercept', 'point']
    s = dm.loc['intercept', 'stderr']
    
    import seaborn as sb
    sb.set_style('whitegrid')
    
    palette = sb.palettes.SEABORN_PALETTES['deep']
    
    figw = 5.842
    figh = 8.442
    
    fig = pt.figure(figsize=(figw,figh))
    ax = pt.subplot(111)
    ax.axvline(0,c='k',lw=.9, ls=':')
    ax.errorbar(df.task, df.yvec, xerr=crt_subject*df.stderr, fmt='o',
        label='Sample', c=palette[0])
    ax.errorbar(x, -1, xerr=crt_population*s, fmt='o',
        label='Population', c=palette[2])
    ax.axhline(-.5,c='k',lw=.9, ls='-')
    ax.set_xlabel(r'Task inferred signal change at $x_1 (ati)$')
    ax.set_ylabel('Waterloo')
    ax.yaxis.set_ticks_position('none')
    pt.box(False)
    pt.yticks(np.hstack((df.yvec, -1)), list(df.waterloo) + ["Meta"] )
    pt.legend(loc='lower center', bbox_to_anchor=(.5, -0.1), ncol=2)


.. image:: figures/population-inference-explorative_figure12_1.png
   :width: 15 cm






Funnel Plot
:::::::::::


.. code:: python

    
    fig = pt.figure(figsize=(figw,figh))
    ax = pt.subplot(111)
    ax.axvline(0,c='k',lw=.9, ls=':')
    ax.errorbar(df.task, df.reci,
        xerr=crt_subject*df.stderr, fmt='o',
        label='Sample', c=palette[0])
    ax.set_xlabel(r'Task inferred signal change at $x_1$ (ati)')
    ax.set_ylabel('Reciprocal of the Squared Standard Error')
    sb.despine()


.. image:: figures/population-inference-explorative_figure14_1.png
   :width: 15 cm






Formal
......

Effect
::::::


.. code:: python

    x = dm.loc['intercept', 'point']
    s = dm.loc['intercept', 'stderr']
    
    # Effect
    print(x)
    
    # 95% confidence interval
    print('lower: {:.2f}, upper {:.2f}'.format(
        x-crt_population*s, x+crt_population*s))


.. code::

    19.99205972926322
    lower: 17.12, upper 22.87
    



p-Value
:::::::


.. code:: python

    print(dm.loc['intercept', 'pvalue'])


.. code::

    1.3418933977536675e-17
    


